{"file_contents":{"manage.py":{"content":"#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mineral_licenses.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":672},"licenses/apps.py":{"content":"from django.apps import AppConfig\n\n\nclass LicensesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'licenses'\n","size_bytes":148},"licenses/management/commands/__init__.py":{"content":"","size_bytes":0},"licenses/__init__.py":{"content":"","size_bytes":0},"mineral_licenses/wsgi.py":{"content":"\"\"\"\nWSGI config for mineral_licenses project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mineral_licenses.settings')\n\napplication = get_wsgi_application()\n","size_bytes":409},"licenses/views.py":{"content":"from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import JsonResponse, FileResponse, HttpResponse\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.views.decorators.http import require_http_methods\nfrom django.core.files.storage import FileSystemStorage\nfrom .models import License, Document\nimport json\n\n\ndef map_view(request):\n    \"\"\"\n    Главная страница с интерактивной картой\n    \"\"\"\n    from django.conf import settings\n    return render(request, 'licenses/map.html', {\n        'yandex_maps_api_key': settings.YANDEX_MAPS_API_KEY\n    })\n\n\ndef licenses_json(request):\n    \"\"\"\n    API endpoint для получения списка лицензий в формате JSON\n    \"\"\"\n    licenses = License.objects.all()\n    data = []\n    \n    for license in licenses:\n        # Проверяем и обновляем статус, если срок истек\n        license.update_status_if_expired()\n\n        data.append({\n            'id': license.id,\n            'license_number': license.license_number,\n            'license_type': license.license_type,\n            'owner': license.owner,\n            'latitude': float(license.latitude) if license.latitude else None,\n            'longitude': float(license.longitude) if license.longitude else None,\n            'polygon_data': license.polygon_data,\n            'region': license.region,\n            'area': license.area,\n            'issue_date': license.issue_date.strftime('%Y-%m-%d'),\n            'expiry_date': license.expiry_date.strftime('%Y-%m-%d') if license.expiry_date else None,\n            'mineral_type': license.mineral_type,\n            'status': license.status,\n            'description': license.description,\n        })\n    \n    return JsonResponse(data, safe=False)\n\n\ndef license_detail(request, license_id):\n    \"\"\"\n    Получение детальной информации о лицензии\n    \"\"\"\n    license = get_object_or_404(License, id=license_id)\n    # Проверяем и обновляем статус, если срок истек\n    license.update_status_if_expired()\n    documents = license.documents.all()\n    \n    data = {\n        'id': license.id,\n        'license_number': license.license_number,\n        'license_type': license.license_type,\n        'owner': license.owner,\n        'latitude': float(license.latitude) if license.latitude else None,\n        'longitude': float(license.longitude) if license.longitude else None,\n        'polygon_data': license.polygon_data,\n        'region': license.region,\n        'area': license.area,\n        'issue_date': license.issue_date.strftime('%Y-%m-%d'),\n        'expiry_date': license.expiry_date.strftime('%Y-%m-%d') if license.expiry_date else None,\n        'mineral_type': license.mineral_type,\n        'status': license.status,\n        'description': license.description,\n        'documents': [\n            {\n                'id': doc.id,\n                'title': doc.title,\n                'file_type': doc.file_type,\n                'file_url': doc.file.url if doc.file else None,\n                'uploaded_at': doc.uploaded_at.strftime('%Y-%m-%d %H:%M'),\n            }\n            for doc in documents\n        ]\n    }\n    \n    return JsonResponse(data)\n\n\n@login_required\ndef upload_document(request, license_id):\n    \"\"\"\n    Загрузка документа для лицензии\n    \"\"\"\n    if request.method == 'POST':\n        license = get_object_or_404(License, id=license_id)\n        \n        if 'file' not in request.FILES:\n            return JsonResponse({'error': 'Файл не найден'}, status=400)\n        \n        file = request.FILES['file']\n        title = request.POST.get('title', file.name)\n        file_type = request.POST.get('file_type', 'other')\n        \n        document = Document.objects.create(\n            license=license,\n            title=title,\n            file=file,\n            file_type=file_type,\n            uploaded_by=request.user\n        )\n        \n        return JsonResponse({\n            'success': True,\n            'document_id': document.id,\n            'message': 'Документ успешно загружен'\n        })\n    \n    return JsonResponse({'error': 'Метод не поддерживается'}, status=405)\n\n\ndef download_document(request, document_id):\n    \"\"\"\n    Скачивание документа\n    \"\"\"\n    import mimetypes\n    import os\n    from urllib.parse import quote\n\n    document = get_object_or_404(Document, id=document_id)\n    \n    if document.file:\n        # Получаем оригинальное имя файла\n        filename = os.path.basename(document.file.name)\n        \n        # Определяем MIME-тип по расширению файла\n        content_type, _ = mimetypes.guess_type(filename)  \n        if not content_type:\n            content_type = 'application/octet-stream'\n        \n        # Открываем файл в бинарном режиме\n        file = document.file.open('rb')\n        \n        response = FileResponse(file, content_type=content_type)\n        \n        # Правильное формирование Content-Disposition для поддержки кириллицы\n        # Используем только один вариант (filename* для Unicode)\n        encoded_filename = quote(filename.encode('utf-8'))\n        response['Content-Disposition'] = f\"attachment; filename*=UTF-8''{encoded_filename}\"\n        \n        return response\n    \n    return HttpResponse('Файл не найден', status=404)\n\n\ndef login_view(request):\n    \"\"\"\n    ЗАГЛУШКА: Форма входа (для будущей LDAP интеграции)\n    \"\"\"\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        \n        user = authenticate(request, username=username, password=password)\n        \n        if user is not None:\n            login(request, user)\n            return redirect('map')\n        else:\n            return render(request, 'licenses/login.html', {\n                'error': 'Неверный логин или пароль'\n            })\n    \n    return render(request, 'licenses/login.html')\n\n\ndef logout_view(request):\n    \"\"\"\n    Выход из системы\n    \"\"\"\n    logout(request)\n    return redirect('login')","size_bytes":6490},"licenses/tests.py":{"content":"from django.test import TestCase\n\n# Create your tests here.\n","size_bytes":60},"mineral_licenses/urls.py":{"content":"\"\"\"\nURL configuration for mineral_licenses project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('licenses.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n","size_bytes":1081},"create_test_data.py":{"content":"import os\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mineral_licenses.settings')\ndjango.setup()\n\nfrom licenses.models import License\nfrom datetime import date, timedelta\n\ndef create_test_licenses():\n    test_licenses = [\n        {\n            'license_number': 'МСК-12345-НЕ',\n            'license_type': 'Геологическое изучение',\n            'owner': 'ООО \"ГеоРесурс\"',\n            'latitude': 55.7558,\n            'longitude': 37.6173,\n            'region': 'Московская область',\n            'area': 'Участок №1, Московская область',\n            'issue_date': date(2023, 1, 15),\n            'expiry_date': date(2028, 1, 15),\n            'mineral_type': 'Нефть',\n            'status': 'active',\n            'description': 'Лицензия на геологическое изучение с целью поиска и оценки нефти в Московской области.'\n        },\n        {\n            'license_number': 'ТЮМ-67890-ДЭ',\n            'license_type': 'Добыча полезных ископаемых',\n            'owner': 'ПАО \"СибирьНефть\"',\n            'latitude': 57.1531,\n            'longitude': 65.5343,\n            'region': 'Тюменская область',\n            'area': 'Западно-Сибирский участок',\n            'issue_date': date(2020, 5, 10),\n            'expiry_date': date(2040, 5, 10),\n            'mineral_type': 'Природный газ',\n            'status': 'active',\n            'description': 'Лицензия на добычу природного газа в Западной Сибири.'\n        },\n        {\n            'license_number': 'КРС-24680-НЕ',\n            'license_type': 'Геологическое изучение',\n            'owner': 'АО \"Красноярскгеология\"',\n            'latitude': 56.0090,\n            'longitude': 92.8725,\n            'region': 'Красноярский край',\n            'area': 'Енисейский участок',\n            'issue_date': date(2022, 3, 20),\n            'expiry_date': date(2027, 3, 20),\n            'mineral_type': 'Уголь',\n            'status': 'active',\n            'description': 'Лицензия на геологическое изучение угольных месторождений.'\n        },\n        {\n            'license_number': 'СВР-13579-ДЭ',\n            'license_type': 'Добыча полезных ископаемых',\n            'owner': 'ООО \"Северные минералы\"',\n            'latitude': 67.5558,\n            'longitude': 33.3974,\n            'region': 'Мурманская область',\n            'area': 'Кольский участок',\n            'issue_date': date(2021, 8, 15),\n            'expiry_date': date(2031, 8, 15),\n            'mineral_type': 'Апатиты',\n            'status': 'active',\n            'description': 'Лицензия на добычу апатитов на Кольском полуострове.'\n        },\n        {\n            'license_number': 'ЯКУ-98765-НЕ',\n            'license_type': 'Геологическое изучение',\n            'owner': 'ЗАО \"Якутские алмазы\"',\n            'latitude': 62.0339,\n            'longitude': 129.7422,\n            'region': 'Республика Саха (Якутия)',\n            'area': 'Вилюйский участок',\n            'issue_date': date(2019, 11, 1),\n            'expiry_date': date(2024, 11, 1),\n            'mineral_type': 'Алмазы',\n            'status': 'suspended',\n            'description': 'Лицензия на геологическое изучение алмазных месторождений (приостановлена).'\n        },\n        {\n            'license_number': 'УРЛ-11223-ДЭ',\n            'license_type': 'Добыча полезных ископаемых',\n            'owner': 'ПАО \"УралРуда\"',\n            'latitude': 56.8389,\n            'longitude': 60.6057,\n            'region': 'Свердловская область',\n            'area': 'Уральский участок',\n            'issue_date': date(2018, 2, 25),\n            'expiry_date': date(2023, 2, 25),\n            'mineral_type': 'Железная руда',\n            'status': 'expired',\n            'description': 'Лицензия на добычу железной руды (истекла).'\n        },\n    ]\n    \n    for license_data in test_licenses:\n        License.objects.get_or_create(\n            license_number=license_data['license_number'],\n            defaults=license_data\n        )\n    \n    print(f\"Создано {len(test_licenses)} тестовых лицензий\")\n\nif __name__ == '__main__':\n    create_test_licenses()\n    print(\"Тестовые данные успешно созданы!\")\n","size_bytes":4962},"replit.md":{"content":"# База лицензий на недропользование\n\n## Описание проекта\n\nВеб-приложение на Django для управления базой данных лицензий на недропользование с интерактивной Яндекс.Картой.\n\n## Основной функционал\n\n### Реализованные функции\n- ✅ Интерактивная Яндекс.Карта с отображением лицензий (40% экрана слева)\n- ✅ Просмотр информации о лицензиях при клике на маркеры\n- ✅ Модальные окна с детальной информацией о лицензии\n- ✅ Функционал загрузки и скачивания документов\n- ✅ **Фильтрация лицензий** по статусу, региону, типу, полезному ископаемому\n- ✅ **Текстовый поиск** по номеру лицензии и недропользователю\n- ✅ **Список лицензий** с карточками и синхронизацией с картой\n- ✅ Административная панель Django для управления данными\n- ✅ Адаптивный интерфейс с разделением экрана (карта 40% + панель управления 60%)\n- ✅ Заглушки для LDAP авторизации (готово к интеграции)\n- ✅ Заглушки для подключения к внешней БД (готово к интеграции)\n\n### Модели данных\n\n**License (Лицензия)**\n- Номер лицензии (уникальный)\n- Вид пользования недрами\n- Недропользователь\n- Координаты (широта, долгота) для карты\n- Регион и участок недр\n- Даты выдачи и окончания\n- Вид полезного ископаемого\n- Статус (действующая, истекла, приостановлена, прекращена)\n- Описание\n\n**Document (Документ)**\n- Связь с лицензией\n- Название документа\n- Файл\n- Тип документа (лицензия, отчет, карта, прочее)\n- Дата загрузки и пользователь\n\n## Структура проекта\n\n```\n.\n├── mineral_licenses/       # Основной проект Django\n│   ├── settings.py        # Настройки проекта\n│   ├── urls.py           # Главный URL конфигуратор\n│   └── wsgi.py           # WSGI конфигурация\n├── licenses/             # Приложение для управления лицензиями\n│   ├── models.py         # Модели данных\n│   ├── views.py          # Представления (views)\n│   ├── urls.py           # URL маршруты\n│   ├── admin.py          # Настройки админ-панели\n│   ├── templates/        # HTML шаблоны\n│   │   └── licenses/\n│   │       ├── base.html     # Базовый шаблон\n│   │       ├── map.html      # Шаблон с картой\n│   │       └── login.html    # Форма входа\n│   └── migrations/       # Миграции БД\n├── media/               # Загруженные документы\n├── create_test_data.py  # Скрипт для создания тестовых данных\n└── manage.py           # Django management команды\n```\n\n## Настройка и запуск\n\n### 1. Настройка Яндекс.Карт API\n\n**ВАЖНО:** Для работы интерактивной карты необходим API ключ Яндекс.Карт.\n\n1. Получите бесплатный API ключ:\n   - Перейдите на https://developer.tech.yandex.ru/\n   - Зарегистрируйтесь или войдите\n   - Выберите \"JavaScript API и HTTP Геокодер\"\n   - Создайте новый ключ\n\n2. Настройте переменную окружения:\n   - Скопируйте `.env.example` в `.env`\n   - Вставьте ваш API ключ в `YANDEX_MAPS_API_KEY`\n\n### 2. Создание суперпользователя\n\nДля доступа к админ-панели создайте суперпользователя:\n\n```bash\npython manage.py createsuperuser\n```\n\n### 3. Доступ к приложению\n\n- **Главная страница с картой:** https://ваш-replit-домен.repl.co/\n- **Админ-панель:** https://ваш-replit-домен.repl.co/admin/\n- **API лицензий:** https://ваш-replit-домен.repl.co/api/licenses/\n\n## Заглушки для будущей интеграции\n\n### LDAP авторизация\n\nВ файле `mineral_licenses/settings.py` находятся закомментированные настройки для LDAP:\n\n```python\n# AUTHENTICATION_BACKENDS = [\n#     'django_auth_ldap.backend.LDAPBackend',\n#     'django.contrib.auth.backends.ModelBackend',\n# ]\n```\n\n**Для активации:**\n1. Установите `django-auth-ldap`: `pip install django-auth-ldap`\n2. Раскомментируйте секцию LDAP в settings.py\n3. Настройте параметры подключения к вашему LDAP серверу\n4. Добавьте настройки в `.env` файл\n\n### Внешняя база данных\n\nВ settings.py есть закомментированная конфигурация для PostgreSQL:\n\n```python\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.postgresql',\n#         ...\n#     }\n# }\n```\n\n**Для активации:**\n1. Установите `psycopg2-binary`: `pip install psycopg2-binary`\n2. Раскомментируйте секцию DATABASES в settings.py\n3. Настройте параметры подключения\n4. Добавьте настройки в `.env` файл\n5. Выполните миграции: `python manage.py migrate`\n\n## API Endpoints\n\n### GET /api/licenses/\nПолучение списка всех лицензий в формате JSON\n\n### GET /api/licenses/<id>/\nПолучение детальной информации о лицензии\n\n### POST /api/licenses/<id>/upload/\nЗагрузка документа для лицензии (требуется авторизация)\n\n### GET /api/documents/<id>/download/\nСкачивание документа\n\n## Тестовые данные\n\nПроект содержит тестовые данные о лицензиях для демонстрации:\n- 6 лицензий из разных регионов России\n- Разные типы лицензий и полезных ископаемых\n- Различные статусы (действующие, приостановленные, истекшие)\n\n## Технологии\n\n- **Backend:** Django 5.2.7\n- **Frontend:** Bootstrap 5, Vanilla JavaScript\n- **Карты:** Яндекс.Карты JavaScript API 2.1\n- **БД:** SQLite (разработка), PostgreSQL (готово к продакшн)\n- **Авторизация:** Django Auth (текущая), LDAP (готово к интеграции)\n\n## Дополнительные команды\n\n### Создание тестовых данных\n```bash\npython create_test_data.py\n```\n\n### Создание миграций\n```bash\npython manage.py makemigrations\npython manage.py migrate\n```\n\n### Запуск сервера\n```bash\npython manage.py runserver 0.0.0.0:5000\n```\n\n## Дата создания\n16 октября 2025\n\n## Последние изменения\n- 16.10.2025: Создание базовой структуры проекта\n- 16.10.2025: Реализация интеграции с Яндекс.Картами\n- 16.10.2025: Добавление функционала загрузки/скачивания документов\n- 16.10.2025: Настройка заглушек для LDAP и БД\n","size_bytes":8300},"mineral_licenses/__init__.py":{"content":"","size_bytes":0},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"django>=5.2.7\",\n    \"django-cors-headers>=4.9.0\",\n    \"pillow>=12.0.0\",\n    \"python-dotenv>=1.1.1\",\n    \"psycopg2-binary>=2.9.0\",\n]\n","size_bytes":279},"README.md":{"content":"# База лицензий на недропользование\n\nВеб-приложение на Django для управления базой данных лицензий на недропользование с интерактивной Яндекс.Картой.\n\n## 🚀 Быстрый старт\n\n### 1. Настройте API ключ Яндекс.Карт\n\nДля работы интерактивной карты вам нужен бесплатный API ключ:\n\n1. Перейдите на https://developer.tech.yandex.ru/\n2. Зарегистрируйтесь или войдите\n3. Выберите \"JavaScript API и HTTP Геокодер\"\n4. Создайте новый ключ\n5. Добавьте ключ в переменные окружения в Replit:\n   - Перейдите в раздел \"Secrets\" (🔒)\n   - Создайте новый секрет с именем `YANDEX_MAPS_API_KEY`\n   - Вставьте ваш API ключ\n\n### 2. Создайте суперпользователя\n\nДля доступа к админ-панели выполните:\n\n```bash\npython manage.py createsuperuser\n```\n\n### 3. Запустите приложение\n\nПриложение уже настроено и запущено! Просто откройте его в браузере.\n\n## 📍 Основные возможности\n\n- **Интерактивная карта** (40% экрана) с маркерами лицензий\n- **Фильтры лицензий** по статусу, региону, типу, полезному ископаемому\n- **Текстовый поиск** по номеру лицензии и недропользователю\n- **Список лицензий** с карточками (синхронизирован с картой)\n- **Детальная информация** о каждой лицензии при клике\n- **Загрузка и скачивание** документов\n- **Админ-панель Django** для управления данными\n- **API endpoints** для интеграции\n- **Готовые заглушки** для LDAP авторизации и внешней БД\n\n## 🔗 Доступ к приложению\n\n- **Главная страница с картой:** `/`\n- **Админ-панель:** `/admin/`\n- **API лицензий:** `/api/licenses/`\n\n## 📚 Тестовые данные\n\nВ базе уже есть 6 тестовых лицензий из разных регионов России для демонстрации функционала.\n\n## 🔧 Для разработчиков\n\nПодробная документация находится в файле **replit.md**, включая:\n- Структуру проекта\n- Описание моделей данных\n- API endpoints\n- Инструкции по интеграции LDAP\n- Настройку внешней базы данных\n- И многое другое\n\n## 📝 Следующие шаги\n\n1. **Настройте API ключ** для работы карты\n2. **Создайте суперпользователя** для доступа к админке\n3. **Добавьте свои лицензии** через админ-панель\n4. При необходимости **интегрируйте LDAP** или **внешнюю БД** (инструкции в replit.md)\n\n---\n\nСоздано с использованием Django 5.2.7 и Яндекс.Карт API\n","size_bytes":3526},"licenses/models.py":{"content":"from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass License(models.Model):\n    \"\"\"\n    Модель для хранения информации о лицензиях на недропользование\n    \"\"\"\n    license_number = models.CharField(max_length=100, unique=True, verbose_name=\"Номер лицензии\")\n    license_type = models.CharField(max_length=200, verbose_name=\"Вид пользования недрами\")\n    owner = models.CharField(max_length=300, verbose_name=\"Недропользователь\")\n    \n    # Геолокация для отображения на карте\n    latitude = models.DecimalField(max_digits=9, decimal_places=6, verbose_name=\"Широта\", null=True, blank=True)\n    longitude = models.DecimalField(max_digits=9, decimal_places=6, verbose_name=\"Долгота\", null=True, blank=True)\n    \n    # Полигон (контур лицензии) в формате GeoJSON\n    polygon_data = models.JSONField(verbose_name=\"Данные полигона (GeoJSON)\", null=True, blank=True)\n    \n    # Информация о территории\n    region = models.CharField(max_length=200, verbose_name=\"Регион\")\n    area = models.CharField(max_length=300, verbose_name=\"Участок недр\", blank=True)\n    \n    # Даты\n    issue_date = models.DateField(verbose_name=\"Дата выдачи\")\n    expiry_date = models.DateField(verbose_name=\"Дата окончания\", null=True, blank=True)\n    \n    # Дополнительная информация\n    mineral_type = models.CharField(max_length=200, verbose_name=\"Вид полезного ископаемого\", blank=True)\n    status = models.CharField(\n        max_length=50, \n        choices=[\n            ('active', 'Действующая'),\n            ('expired', 'Истекла'),\n            ('suspended', 'Приостановлена'),\n            ('terminated', 'Прекращена'),\n        ],\n        default='active',\n        verbose_name=\"Статус\"\n    )\n    \n    \n    description = models.TextField(verbose_name=\"Описание\", blank=True)\n    \n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Дата создания записи\")\n    updated_at = models.DateTimeField(auto_now=True, verbose_name=\"Дата обновления записи\")\n    \n    class Meta:\n        verbose_name = \"Лицензия\"\n        verbose_name_plural = \"Лицензии\"\n        ordering = ['-created_at']\n    \n    def __str__(self):\n        return f\"{self.license_number} - {self.owner}\"\n\n    def update_status_if_expired(self):\n        \"\"\"\n        Проверяет и обновляет статус лицензии, если срок действия истек\n        \"\"\"\n        from datetime import date\n        \n        if self.expiry_date and self.expiry_date < date.today():\n            if self.status == 'active':\n                self.status = 'expired'\n                self.save(update_fields=['status'])\n        \n        return self.status\n\n\nclass Document(models.Model):\n    \"\"\"\n    Модель для хранения документов, связанных с лицензиями\n    \"\"\"\n    license = models.ForeignKey(\n        License, \n        on_delete=models.CASCADE, \n        related_name='documents',\n        verbose_name=\"Лицензия\"\n    )\n    title = models.CharField(max_length=300, verbose_name=\"Название документа\")\n    file = models.FileField(upload_to='license_documents/', verbose_name=\"Файл\")\n    file_type = models.CharField(\n        max_length=50,\n        choices=[\n            ('license', 'Лицензия'),\n            ('report', 'Отчет'),\n            ('map', 'Карта'),\n            ('other', 'Прочее'),\n        ],\n        default='other',\n        verbose_name=\"Тип документа\"\n    )\n    uploaded_at = models.DateTimeField(auto_now_add=True, verbose_name=\"Дата загрузки\")\n    uploaded_by = models.ForeignKey(\n        User, \n        on_delete=models.SET_NULL, \n        null=True,\n        verbose_name=\"Загрузил пользователь\"\n    )\n    \n    class Meta:\n        verbose_name = \"Документ\"\n        verbose_name_plural = \"Документы\"\n        ordering = ['-uploaded_at']\n    \n    def __str__(self):\n        return f\"{self.title} ({self.license.license_number})\"\n","size_bytes":4407},"licenses/migrations/__init__.py":{"content":"","size_bytes":0},"licenses/admin.py":{"content":"from django.contrib import admin\nfrom .models import License, Document\n\n\n@admin.register(License)\nclass LicenseAdmin(admin.ModelAdmin):\n    list_display = ['license_number', 'owner', 'license_type', 'region', 'status', 'issue_date']\n    list_filter = ['status', 'region', 'license_type']\n    search_fields = ['license_number', 'owner', 'region', 'mineral_type']\n    date_hierarchy = 'issue_date'\n    ordering = ['-created_at']\n    \n    fieldsets = (\n        ('Основная информация', {\n            'fields': ('license_number', 'license_type', 'owner', 'status')\n        }),\n        ('Территория', {\n            'fields': ('region', 'area', 'latitude', 'longitude')\n        }),\n        ('Даты', {\n            'fields': ('issue_date', 'expiry_date')\n        }),\n        ('Дополнительная информация', {\n            'fields': ('mineral_type', 'description')\n        }),\n    )\n\n\n@admin.register(Document)\nclass DocumentAdmin(admin.ModelAdmin):\n    list_display = ['title', 'license', 'file_type', 'uploaded_at', 'uploaded_by']\n    list_filter = ['file_type', 'uploaded_at']\n    search_fields = ['title', 'license__license_number']\n    date_hierarchy = 'uploaded_at'\n    ordering = ['-uploaded_at']\n    \n    fieldsets = (\n        ('Информация о документе', {\n            'fields': ('license', 'title', 'file_type')\n        }),\n        ('Файл', {\n            'fields': ('file',)\n        }),\n        ('Метаданные', {\n            'fields': ('uploaded_by',),\n            'classes': ('collapse',)\n        }),\n    )\n","size_bytes":1592},"mineral_licenses/settings.py":{"content":"\"\"\"\nDjango settings for mineral_licenses project.\n\nGenerated by 'django-admin startproject' using Django 5.2.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*kd=nc*+5frcmt#3ev&esny@u_wy6*6c(n8)+-5&nlqxg!hsja'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n# CSRF settings for Replit\n#CSRF_TRUSTED_ORIGINS = [\n#    'https://*.replit.dev',\n#    'https://*.repl.co',\n#]\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'licenses',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mineral_licenses.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mineral_licenses.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\n\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.sqlite3',\n#         'NAME': BASE_DIR / 'db.sqlite3',\n#     }\n# }\n\nimport dj_database_url\n\nDATABASES = {\n    'default': dj_database_url.config(\n        default=os.getenv('DATABASE_URL'),\n        conn_max_age=600,\n        conn_health_checks=True,\n    )\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.2/topics/i18n/\n\nLANGUAGE_CODE = 'ru-ru'\n\nTIME_ZONE = 'Europe/Moscow'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n\n# Media files\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n\n# CSRF settings for Replit\n#CSRF_TRUSTED_ORIGINS = [\n#    'https://*.replit.dev',\n#    'https://*.repl.co',\n#]\n\n# Яндекс.Карты API ключ\n# Получите свой API ключ на https://developer.tech.yandex.ru/\nYANDEX_MAPS_API_KEY = os.getenv('YANDEX_MAPS_API_KEY', '')\n\n# ЗАГЛУШКА: LDAP Authentication\n# Раскомментируйте и настройте при подключении к LDAP серверу\n# import ldap\n# from django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n# \n# AUTHENTICATION_BACKENDS = [\n#     'django_auth_ldap.backend.LDAPBackend',\n#     'django.contrib.auth.backends.ModelBackend',\n# ]\n# \n# AUTH_LDAP_SERVER_URI = 'ldap://your-ldap-server.com'\n# AUTH_LDAP_BIND_DN = 'cn=admin,dc=example,dc=com'\n# AUTH_LDAP_BIND_PASSWORD = 'your-password'\n# AUTH_LDAP_USER_SEARCH = LDAPSearch(\n#     'ou=users,dc=example,dc=com',\n#     ldap.SCOPE_SUBTREE,\n#     '(uid=%(user)s)'\n# )\n\n# ЗАГЛУШКА: Внешняя база данных\n# Замените на свои настройки при подключении к продакшн БД\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.postgresql',\n#         'NAME': 'your_database_name',\n#         'USER': 'your_database_user',\n#         'PASSWORD': 'your_database_password',\n#         'HOST': 'your-database-host.com',\n#         'PORT': '5432',\n#     }\n# }\n","size_bytes":5190},"mineral_licenses/asgi.py":{"content":"\"\"\"\nASGI config for mineral_licenses project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mineral_licenses.settings')\n\napplication = get_asgi_application()\n","size_bytes":409},"licenses/management/__init__.py":{"content":"","size_bytes":0},"licenses/urls.py":{"content":"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.map_view, name='map'),\n    path('api/licenses/', views.licenses_json, name='licenses_json'),\n    path('api/licenses/<int:license_id>/', views.license_detail, name='license_detail'),\n    path('api/licenses/<int:license_id>/upload/', views.upload_document, name='upload_document'),\n    path('api/documents/<int:document_id>/download/', views.download_document, name='download_document'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]\n","size_bytes":580},"licenses/migrations/0001_initial.py":{"content":"# Generated by Django 5.2.7 on 2025-10-16 04:01\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='License',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('license_number', models.CharField(max_length=100, unique=True, verbose_name='Номер лицензии')),\n                ('license_type', models.CharField(max_length=200, verbose_name='Вид пользования недрами')),\n                ('owner', models.CharField(max_length=300, verbose_name='Недропользователь')),\n                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Широта')),\n                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Долгота')),\n                ('region', models.CharField(max_length=200, verbose_name='Регион')),\n                ('area', models.CharField(blank=True, max_length=300, verbose_name='Участок недр')),\n                ('issue_date', models.DateField(verbose_name='Дата выдачи')),\n                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),\n                ('mineral_type', models.CharField(blank=True, max_length=200, verbose_name='Вид полезного ископаемого')),\n                ('status', models.CharField(choices=[('active', 'Действующая'), ('expired', 'Истекла'), ('suspended', 'Приостановлена'), ('terminated', 'Прекращена')], default='active', max_length=50, verbose_name='Статус')),\n                ('description', models.TextField(blank=True, verbose_name='Описание')),\n                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),\n                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),\n            ],\n            options={\n                'verbose_name': 'Лицензия',\n                'verbose_name_plural': 'Лицензии',\n                'ordering': ['-created_at'],\n            },\n        ),\n        migrations.CreateModel(\n            name='Document',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=300, verbose_name='Название документа')),\n                ('file', models.FileField(upload_to='license_documents/', verbose_name='Файл')),\n                ('file_type', models.CharField(choices=[('license', 'Лицензия'), ('report', 'Отчет'), ('map', 'Карта'), ('other', 'Прочее')], default='other', max_length=50, verbose_name='Тип документа')),\n                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),\n                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Загрузил пользователь')),\n                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='licenses.license', verbose_name='Лицензия')),\n            ],\n            options={\n                'verbose_name': 'Документ',\n                'verbose_name_plural': 'Документы',\n                'ordering': ['-uploaded_at'],\n            },\n        ),\n    ]\n","size_bytes":3896},"licenses/migrations/0002_license_polygon_data_alter_license_latitude_and_more.py":{"content":"# Generated by Django 5.2.7 on 2025-10-28 01:39\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('licenses', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='license',\n            name='polygon_data',\n            field=models.JSONField(blank=True, null=True, verbose_name='Данные полигона (GeoJSON)'),\n        ),\n        migrations.AlterField(\n            model_name='license',\n            name='latitude',\n            field=models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Широта'),\n        ),\n        migrations.AlterField(\n            model_name='license',\n            name='longitude',\n            field=models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Долгота'),\n        ),\n    ]\n","size_bytes":904},"licenses/management/commands/import_geojson.py":{"content":"import json\nimport re\nfrom datetime import date, datetime\nfrom django.core.management.base import BaseCommand\nfrom licenses.models import License\n\n\nclass Command(BaseCommand):\n    help = 'Импорт лицензий из GeoJSON файла'\n\n    def add_arguments(self, parser):\n        parser.add_argument('geojson_file', type=str, help='Путь к GeoJSON файлу')\n\n    def handle(self, *args, **options):\n        geojson_file = options['geojson_file']\n        \n        self.stdout.write(self.style.SUCCESS(f'Загрузка данных из {geojson_file}...'))\n        \n        with open(geojson_file, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n        \n        features = data.get('features', [])\n        self.stdout.write(f'Найдено объектов: {len(features)}')\n        \n        imported_count = 0\n        skipped_count = 0\n        updated_count = 0\n        \n        for feature in features:\n            try:\n                # Извлекаем данные\n                geometry = feature['geometry']\n                properties = feature['properties']\n                description = properties.get('description', '')\n                fill_color = properties.get('fill', '')\n                \n                # Парсим описание\n                parsed = self.parse_description(description)\n                \n                if not parsed['license_number']:\n                    self.stdout.write(self.style.WARNING(f'Пропуск: не найден номер лицензии в \"{description[:100]}\"'))\n                    skipped_count += 1\n                    continue\n                \n                # Определяем статус по цвету\n                status = self.get_status_from_color(fill_color, description)\n                \n                # Вычисляем центр полигона\n                center = self.calculate_polygon_center(geometry['coordinates'], geometry.get('type', 'Polygon'))\n                \n                # Определяем регион по префиксу номера лицензии\n                region = self.extract_region(parsed['license_number'])\n                \n                # Проверяем, существует ли лицензия\n                license_obj, created = License.objects.update_or_create(\n                    license_number=parsed['license_number'],\n                    defaults={\n                        'license_type': parsed['license_type'],\n                        'owner': parsed['owner'],\n                        'latitude': center[1] if center else None,\n                        'longitude': center[0] if center else None,\n                        'polygon_data': geometry,\n                        'region': region,\n                        'area': parsed['area_name'],\n                        'issue_date': date.today(),\n                        'mineral_type': 'Золото',\n                        'status': status,\n                        'description': description.replace('<br/>', '\\n'),\n                    }\n                )\n                \n                if created:\n                    imported_count += 1\n                    self.stdout.write(f'✓ Создана: {parsed[\"license_number\"]}')\n                else:\n                    updated_count += 1\n                    self.stdout.write(f'↻ Обновлена: {parsed[\"license_number\"]}')\n                    \n            except Exception as e:\n                self.stdout.write(self.style.ERROR(f'Ошибка обработки объекта: {str(e)}'))\n                skipped_count += 1\n                continue\n        \n        self.stdout.write(self.style.SUCCESS(f'\\n=== Итоги импорта ==='))\n        self.stdout.write(self.style.SUCCESS(f'Создано новых: {imported_count}'))\n        self.stdout.write(self.style.SUCCESS(f'Обновлено: {updated_count}'))\n        self.stdout.write(self.style.WARNING(f'Пропущено: {skipped_count}'))\n        self.stdout.write(self.style.SUCCESS(f'Всего обработано: {imported_count + updated_count + skipped_count}'))\n\n    def parse_description(self, description):\n        \"\"\"Парсит описание лицензии\"\"\"\n        # Удаляем HTML теги\n        text = description.replace('<br/>', ' | ').strip()\n        \n        result = {\n            'license_number': '',\n            'license_type': '',\n            'area_name': '',\n            'owner': '',\n            'area_size': ''\n        }\n        \n        # Разбиваем по разделителю |\n        parts = [p.strip() for p in text.split('|')]\n        \n        if len(parts) > 0:\n            # Первая часть обычно содержит номер, тип и название\n            first_part = parts[0]\n            \n            # Пытаемся извлечь номер лицензии (формат: ЧИТ 011511, МАГ 04663, и т.д.)\n            license_match = re.search(r'([А-ЯЁ]{3}\\s+\\d{5,6})', first_part)\n            if license_match:\n                result['license_number'] = license_match.group(1)\n                \n                # Всё после номера - это тип и название\n                remainder = first_part[license_match.end():].strip()\n                \n                # Тип обычно идёт сразу после номера (БЭ, БП, БР и т.д.)\n                type_match = re.match(r'(БЭ|БП|БР|ГРР)\\s+(.*)', remainder)\n                if type_match:\n                    result['license_type'] = f\"{type_match.group(1)} - {type_match.group(2)}\"\n                    result['area_name'] = type_match.group(2)\n                else:\n                    result['license_type'] = remainder\n                    result['area_name'] = remainder\n        \n        # Площадь\n        if len(parts) > 1:\n            area_match = re.search(r'Площадь:\\s*([\\d,]+)\\s*кв\\.км', parts[1])\n            if area_match:\n                result['area_size'] = area_match.group(1)\n        \n        # Владелец - обычно последняя часть\n        if len(parts) > 2:\n            result['owner'] = parts[2].strip()\n        elif len(parts) > 1 and 'Площадь' not in parts[1]:\n            result['owner'] = parts[1].strip()\n        else:\n            result['owner'] = 'Не указан'\n            \n        return result\n\n    def get_status_from_color(self, color, description):\n        \"\"\"Определяет статус лицензии по цвету\"\"\"\n        color = color.lower()\n        \n        if color == '#1bad03':\n            return 'terminated'\n        elif color == '#ed4543':\n            return 'active'\n        elif color in ['#0e4779', '#006edb']:\n            return 'active'\n        elif 'purple' in color or 'violet' in color or '#9b30ff' in color:\n            return 'suspended'\n        else:\n            return 'active'\n\n    def calculate_polygon_center(self, coordinates, geom_type='Polygon'):\n        \"\"\"Вычисляет центр полигона (поддерживает Polygon и MultiPolygon)\"\"\"\n        if not coordinates or len(coordinates) == 0:\n            return None\n        \n        if geom_type == 'MultiPolygon':\n            # Для MultiPolygon берём первый полигон\n            if not coordinates[0] or len(coordinates[0]) == 0:\n                return None\n            outer_ring = coordinates[0][0]\n        else:\n            # Для обычного Polygon берём внешний контур (первый массив)\n            outer_ring = coordinates[0]\n        \n        if not outer_ring or len(outer_ring) == 0:\n            return None\n        \n        # Вычисляем среднее арифметическое координат\n        lon_sum = sum(coord[0] for coord in outer_ring)\n        lat_sum = sum(coord[1] for coord in outer_ring)\n        count = len(outer_ring)\n        \n        return [lon_sum / count, lat_sum / count]\n\n    def extract_region(self, license_number):\n        \"\"\"Извлекает название региона из префикса номера лицензии\"\"\"\n        regions = {\n            'МАГ': 'Магаданская область',\n            'КЕМ': 'Кемеровская область',\n            'ПЕМ': 'Пермский край',\n            'ЧИТ': 'Забайкальский край',\n            'САХ': 'Сахалинская область',\n            'ИРК': 'Иркутская область',\n            'АМУ': 'Амурская область',\n            'ХАБ': 'Хабаровский край',\n            'КРА': 'Красноярский край',\n            'БУР': 'Республика Бурятия',\n            'ЯКУ': 'Республика Саха (Якутия)',\n            'ТЮМ': 'Тюменская область',\n        }\n        \n        prefix = license_number[:3]\n        return regions.get(prefix, 'Регион не определён')\n","size_bytes":9097}},"version":2}